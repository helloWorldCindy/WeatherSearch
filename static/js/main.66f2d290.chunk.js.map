{"version":3,"sources":["Img/background.jpg","components/CustomizeTextField.js","components/InputForm.js","components/SingleWeatherDisplay.js","components/WeatherDisplay.js","components/Error.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withStyles","input","color","margin","borderBottom","fontSize","props","classes","react_default","a","createElement","TextField","Object","assign","InputLabelProps","style","textOverflow","whiteSpace","overflow","width","InputProps","className","InputForm","name","styles","mainStyle","marginTop","display","flexDirection","titleStyle","textAlign","fontWeight","inputStyle","justifyContent","buttonStyle","height","_React$useState","React","useState","city","country","_React$useState2","slicedToArray","values","setValues","_React$useState3","_React$useState4","errorTextForCity","setsCityTexts","handleButtonClick","onSearch","CustomizeTextField","error","id","label","onKeyDown","event","key","helperText","onChange","objectSpread","defineProperty","target","value","Button","variant","onClick","SingleWeatherDisplay","padding","backgroundColor","apiNameStyle","marginBottom","cityStyle","tempIconStyle","imageIconStyle","weatherIconStyle","apiName","time","description","iconUrl","alt","src","lib_default","iconId","iconCode","flip","rotate","marginLeft","isFah","tempF","tempC","WeatherDisplay","_ref","data","divStyle","fahrenheit","setTemp","Switch","checked","inputProps","aria-label","map","item","components_SingleWeatherDisplay","Error","Main","setData","setError","api_keys","computTime","today","Date","moment","add","getDay","calendar","parseOpenMapWeather","json","main","temp","celsiusToFahrenheit","weather","toString","parseApixu","current","temp_c","temp_f","condition","text","code","icon","location","toFixed","fetchAllWeather","asyncToGenerator","regenerator_default","mark","_callee2","api_call_arr","promises","results","wrap","_context2","prev","next","url","concat","parseFunc","_ref2","_callee","result","_context","fetch","sent","ok","abrupt","stop","_x3","apply","this","arguments","Promise","all","t0","console","log","_x","_x2","alignItems","components_InputForm","components_Error","length","components_WeatherDisplay","App","backgroundImage","BackgroundImage","components_Main","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66f2d290.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.369ce7cc.jpg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst styles = {\n  input: {\n    color: \"white\",\n    margin: 10,\n    borderBottom: 'white',\n    fontSize: 16\n  }\n};\n\nfunction CustomizedInputs(props) {\n  const { classes } = props;\n\n  return (\n    <TextField\n      {...props}\n      InputLabelProps={{\n          style: {\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            width: '100%',\n            color: 'white',\n            fontSize: 20\n      }}}\n      InputProps={{\n        className: classes.input\n      }}\n    />\n  );\n}\n\nCustomizedInputs.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(CustomizedInputs);\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\nimport { Input } from 'antd';\nimport CustomizeTextField from './CustomizeTextField'\n\nconst InputForm = (props) => {\n  const styles = {\n    mainStyle: {\n      marginTop: '5%',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    titleStyle: {\n      fontSize: 60,\n      textAlign: 'center',\n      color: 'white',\n      fontWeight: 'bold'\n    },\n    inputStyle: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    buttonStyle: {\n      marginTop: \"4%\",\n      height: 50\n    }\n  }\n\n  const [values, setValues] = React.useState({\n    city: \"\",\n    country: \"\",\n  })\n\n  const [errorTextForCity, setsCityTexts] = React.useState(\"\")\n\n  const handleTextChange = name => event => {\n    setValues({ ...values, [name]: event.target.value })\n    if (values.city !== \"\") setsCityTexts(\"\")\n  }\n\n  const handleButtonClick = () => {\n    if (!values.city) {\n      setsCityTexts(\"City is required\")\n    }\n    else{\n      props.onSearch(values.city)\n    }\n  }\n\n  const handleEnterPress = event => {\n    if(event.key === 'Enter') {\n      handleButtonClick()\n    }\n  }\n  \n  return (\n    <div style={styles.mainStyle}>\n        <p style={styles.titleStyle}> Weather Search</p>\n        <div style={styles.inputStyle}>\n          <CustomizeTextField\n            error={!!errorTextForCity}\n            id=\"city\"\n            label=\"Enter city here\"\n            style={{margin: 10}}\n            onKeyDown={handleEnterPress}\n            helperText={errorTextForCity}\n            onChange={handleTextChange('city')}\n          />\n          <Button style={styles.buttonStyle} variant=\"contained\" color=\"primary\" onClick={handleButtonClick}>Search</Button>\n        </div>\n    </div>\n  )\n}\n\nexport default InputForm\n","import React from 'react';\nimport WeatherIcon from 'react-icons-weather';\n\nconst SingleWeatherDisplay = (props) => {\n  const styles = {\n    mainStyle: {\n      margin: 20,\n      display: 'flex',\n      padding: 20,\n      flexDirection: 'column',\n      justifyContent: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      color: 'white',\n      width: '100%',\n      height: 250\n    },\n    apiNameStyle: {\n      marginBottom: '10%',\n      fontSize: 20,\n      fontWeight: 'bold'\n    },\n    cityStyle: {\n      fontSize: 25,\n      marginTop: -10,\n      marginBottom: 5\n    },\n    tempIconStyle: {\n      display: 'flex',\n      marginTop:10,\n      marginBottom: 5\n    },\n    imageIconStyle: {\n      width: 48,\n      height: 50\n    },\n    weatherIconStyle: {\n      fontSize: 35\n    }\n  }\n  \n  return (\n    <div style={styles.mainStyle}>\n      <div style={styles.apiNameStyle}> {props.apiName} </div>\n      <div style={styles.cityStyle}> {props.city} </div>\n      <div>{props.time}</div>\n      <div> {props.description} </div>\n      <div style={styles.tempIconStyle}>\n        {props.iconUrl ? \n          <img alt=\"weather icon\" src={props.iconUrl} style={styles.imageIconStyle}/>\n            : <WeatherIcon name=\"owm\" iconId={props.iconCode} flip=\"horizontal\" rotate=\"90\" style={styles.weatherIconStyle}/>}\n        <div style={{marginLeft: 10, fontSize: 15}}> \n          {props.isFah ? props.tempF + \"°F\" : props.tempC + \"°C\"}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SingleWeatherDisplay\n","import React from 'react'\nimport SingleWeatherDisplay from './SingleWeatherDisplay'\nimport Switch from '@material-ui/core/Switch';\n\nconst WeatherDisplay = ({ data }) => {\n  const styles = {\n    mainStyle: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: 500,\n      color: 'white'\n    },\n    divStyle: {\n      display: 'flex',\n      flexDirection: 'row'\n    }   \n  }\n  const [fahrenheit, setTemp] = React.useState(false);\n  \n  return (\n    <div style={styles.mainStyle}>\n      <div style={styles.divStyle}>\n        <div>°C</div>\n        <Switch\n          checked={fahrenheit}\n          onChange={() => setTemp(!fahrenheit)}\n          value=\"checkedB\"\n          color=\"primary\"\n          inputProps={{ 'aria-label': 'primary checkbox' }}\n        />\n        <div>°F</div>\n      </div>\n      <div style={styles.divStyle}>\n        {\n          data.map((item) => {\n            return <SingleWeatherDisplay isFah={fahrenheit} key={item.apiName} {...item}/>\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default WeatherDisplay\n","import React from 'react'\n\nconst Error = (props) => {\n  const style = {\n    margin: 20,\n    display: 'flex',\n    padding: 20,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    textAlign: 'center',\n    color: 'white',\n    width: 250,\n    height: 100\n  }\n\n  return (\n    <div style={style}>\n      <p> City Not Found </p>\n    </div>\n  )\n}\n\nexport default Error\n","import React from 'react';\nimport InputForm from './InputForm'\nimport WeatherDisplay from './WeatherDisplay'\nimport moment from 'moment'\nimport Error from './Error'\n\nconst Main = (props) => {\n\n  const [data, setData] = React.useState([]);\n\n  const [error, setError] = React.useState(false);\n\n  const style = {\n      mainStyle: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'column'\n    }\n  }\n\n  const api_keys = [\n    {\n      name: \"openMapWeather\",\n      key : \"eb0d32f4efdd516e4bcbc048ef5504bd\"\n    },\n    {\n      name: \"apixu\",\n      key: \"79790e5c326c464494100646190706\"\n    }\n  ]\n\n  const handleSearch = (city, country) => {\n    fetchAllWeather(city, country)\n  }\n\n  const computTime = () => {\n    let today = new Date()\n    let date = moment().add(today.getDay(), 'days').calendar()\n    return date\n  }\n  const parseOpenMapWeather = (json, apiName) => {\n    return {\n      tempC: json.main.temp,\n      tempF: celsiusToFahrenheit(json.main.temp),\n      description: json.weather[0].description,\n      iconCode: json.weather[0].id.toString(),\n      iconUrl: null,\n      city: json.name,\n      time: computTime(),\n      apiName: apiName\n    }\n  }\n\n  const parseApixu = (json, apiName) => {\n    return {\n      tempC: json.current.temp_c,\n      tempF: json.current.temp_f,\n      description: json.current.condition.text,\n      iconCode: json.current.condition.code.toString(),\n      iconUrl: \"https:\" + json.current.condition.icon,\n      city: json.location.name,\n      time: computTime(),\n      apiName: apiName\n    }\n  }\n\n  const celsiusToFahrenheit = (temp) => {\n    let num = (temp*1.8)+32\n    return num.toFixed(2)\n  }\n\n  const fetchAllWeather = async (city, country) => {\n\n    const api_call_arr = [\n      {\n        name: \"OpenMapWeather\",\n        url: `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_keys[0].key}&units=metric`,\n        parseFunc: parseOpenMapWeather\n      },\n      {\n        name: \"Apixu\",\n        url: `https://api.apixu.com/v1/current.json?key=${api_keys[1].key}&q=${city}`,\n        parseFunc: parseApixu\n      }\n    ]\n    try{\n      setError(false)\n      const promises = api_call_arr.map(async (item) => {\n        const result = await fetch(item.url)\n        if (!result.ok) {\n          setError(true)\n          return null\n        }\n        const json = await result.json()\n        if (item.name === \"OpenMapWeather\") return parseOpenMapWeather(json, item.name)\n        else return parseApixu(json, item.name)\n      })\n      const results = await Promise.all(promises)\n      if (!results[0]) setData([])\n      else setData(results)\n    } catch (error) {\n      setError(true)\n      console.log(error);\n    }\n      \n  }\n\n  return (\n    <div style={style.mainStyle}>\n      <InputForm onSearch={handleSearch}/>\n      {error ? <Error /> : ( data.length > 0 && <WeatherDisplay data={data} />)}\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'react';\nimport Main from './components/Main'\nimport BackgroundImage from './Img/background.jpg'\nimport './App.css'\n\nfunction App() {\n  const style = {\n    backgroundImage: 'url(' + BackgroundImage +')',\n    width: '100%',\n    height: '850px'\n  }\n  return (\n    <div style={style}>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}